from scipy import interpolate
import numpy as np
from scipy.interpolate import InterpolatedUnivariateSpline
from scipy.spatial import distance
import matplotlib.cm as cm
import matplotlib.pyplot as plt
%matplotlib inline


def drawDataPoints(full_case, tid, numberOfPoints):
    colors = iter(cm.rainbow(np.linspace(0, 1, len(full_case["offerings_data"]))))
    for i in range(0,len(full_case["offerings_data"])):
        x1=[]
        y1=[]
        z1=[]
        n=len(full_case["offerings_data"][i]["estimator_stats"])
        for j in range(0,n):
            x1.append(full_case["offerings_data"][i]["estimator_stats"][j]['bid'])
            y1.append(full_case["offerings_data"][i]["estimator_stats"][j]['clicks'])
            z1.append(full_case["offerings_data"][i]["estimator_stats"][j]['spend'])
        #f = CubicSpline(x1, y1)
        #f = interpolate.interp1d(x1,y1,kind='cubic')
        f = InterpolatedUnivariateSpline(x1,y1)
        f2 = InterpolatedUnivariateSpline(x1,z1)
        #f2 = interpolate.interp1d(x1, z1,kind='cubic')
        #f2 = CubicSpline(x1, z1)
       
        # Log spaced points for bid
        x = np.power(10, np.linspace(np.log10(min(x1)), np.log10(max(x1)), numberOfPoints))
        y = f(x)                                                       # geting value for clicks using the function
        z = f2(x)                                                      # geting value for spend using the function
        
        f3 = interpolate.interp1d(x,y)
        x3 = np.power(10, np.linspace(np.log10(min(x1)), np.log10(max(x1)), 16))
        y3 = f3(x3)
        f4 = interpolate.interp1d(x,z)
        z3 =f4(x3)
        
        lossClicks = distance.euclidean(y1,y3)
        lossSpend = distance.euclidean(z1,z3)
        CSlossClicks = distance.chebyshev(y1,y3)
        CSlossSpend = distance.chebyshev(z1,z3)
        plt.scatter(x1,y1,color='black', marker='o' )
        plt.plot(x,y,color=next(colors),marker='X')
        
        for p in range(0,numberOfPoints):
            full_case['offerings_data'][i]['estimator_stats'][p]['bid']=x[p]
            full_case['offerings_data'][i]['estimator_stats'][p]['clicks']=y[p]
            full_case['offerings_data'][i]['estimator_stats'][p]['spend']=z[p]
            
    plt.xlabel('Bid')
    plt.ylabel('Clicks')
    plt.title(str(numberOfPoints)+'- data points(Bid-Clicks)- TEID:'+str(tid))
    plt.show()
    return full_case,lossClicks,lossSpend,CSlossClicks,CSlossSpend

import pandas as pd
import numpy as np
df = pd.read_csv('TEstid.csv')
tEstimationIDs =df['1']
sampleid=tEstimationIDs.sample(n=10,random_state=1)
sampleid.values

****array([1121, 2065, 3211, 3969,  177, 3463, 2367, 1303,  543, 1711],
      dtype=int64)

sampleid.values[3]=1287
sampleid.values[5]=1491
sampleid.values[8]=1164

%load_ext autoreload
%autoreload 2
import json
import pandas as pd 
from xpd import TrafficEstimatorBudgetAllocation
engine = TrafficEstimatorBudgetAllocation()
from scipy import interpolate
stats = pd.DataFrame(columns=['TrafficEstimationID','NumberofPoints','IP-Clicks-Euclidean','IP-Spend-Euclidean',
                              'IP-Clicks-Chebyshev','IP-Spend-Chebyshev','OP-BudgetPCTLossAvg',
                              'OP-ClickPCTLossAvg','OP-CostPCTLossAvg','OP-BudgetABSLossAvg','OP-ClickABSLossAvg',
                             'OP-CostABSLossAvg'])
for i in sampleid.values:
    optimalNumbers =[]
    full_case = json.load(open('inputfiles/'+str(i)+'.json' ))
    full_case_result = engine.run_algorithm(full_case)
    final16 = pd.DataFrame()
    df = pd.DataFrame.from_dict(full_case_result, orient='columns')
    df2 = df['budget_allocation_result'].apply(pd.Series)
    df3 = df2['offerings_result'].apply(pd.Series)
    for j in range(0,len(full_case_result)):
        for ind in range(0,len(full_case_result[j]['budget_allocation_result']['offerings_result'])):
            temp = df3[ind].apply(pd.Series)
            final16 = pd.concat([final16,temp])
    final16 =final16[["budget","clicks","cost","offering"]]
    final16 = final16.drop_duplicates()   
    final16 = final16.replace(np.nan,0)
    #print(final16)
    
    for nn in range(3,17):
        full_case = json.load(open('inputfiles/'+str(i)+'.json' ))
        
    
    
        
        full_case_new,lossClick,lossSpend,chebyshevClicks,chebyshevSpend = drawDataPoints(full_case,i,nn)
        
        
        for yy in range(0,len(full_case_new['offerings_data'])):
            for k in range(15,nn-1,-1):
                del full_case_new['offerings_data'][yy]['estimator_stats'][k]
        
        ###### Working with $nn$ datapoints
        full_case_result = engine.run_algorithm(full_case_new)
        finalnn = pd.DataFrame()
        df = pd.DataFrame.from_dict(full_case_result, orient='columns')
        df2 = df['budget_allocation_result'].apply(pd.Series)
        df3 = df2['offerings_result'].apply(pd.Series)
        for j in range(0,len(full_case_result)):
            for ind in range(0,len(full_case_result[j]['budget_allocation_result']['offerings_result'])):
                temp = df3[ind].apply(pd.Series)
                finalnn = pd.concat([finalnn,temp])
        finalnn =finalnn[["budget","clicks","cost","offering"]]
        finalnn = finalnn.drop_duplicates()   
        finalnn = finalnn.replace(np.nan,0)
        #print(nn)
        #print(finalnn)
        
        PDif=100*((finalnn-final16)/final16)
        PDif.replace(np.nan,0)
        
        AbsDif = finalnn-final16
        allstats= [i,nn,lossClick,lossSpend,chebyshevClicks,chebyshevSpend,PDif["budget"].mean(),PDif["clicks"].mean(),
                  PDif["cost"].mean(),AbsDif["budget"].mean(), AbsDif["clicks"].mean(),AbsDif["cost"].mean()]
        stats.loc[len(stats)]=allstats
        #diff = final16.subtract(finalnn)
        #compare = diff[diff["offering"]==0]
        #ll= []
        #print(compare)
        #for iii in compare.values:
        #    for jjj in iii:
        #        ll.append(jjj)
        #if(all((int(v) == 0 or abs(int(v))==1) for v in ll)) :
        #    optimalNumbers.append(nn)
        #print(full_case_new['offerings_data'][0]['estimator_stats'])
        
        
    print("Sampled TrafficEstimationID: "+str(i))
    #print(" Number of points where we get best results: "+str(optimalNumbers))
    
print(stats)
      
